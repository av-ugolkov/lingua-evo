// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// mockRepoVocabAccess is an autogenerated mock type for the repoVocabAccess type
type mockRepoVocabAccess struct {
	mock.Mock
}

// AddAccessForUser provides a mock function with given fields: ctx, vid, uid, isEditor
func (_m *mockRepoVocabAccess) AddAccessForUser(ctx context.Context, vid uuid.UUID, uid uuid.UUID, isEditor bool) error {
	ret := _m.Called(ctx, vid, uid, isEditor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, vid, uid, isEditor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEditable provides a mock function with given fields: ctx, vid, uid
func (_m *mockRepoVocabAccess) GetEditable(ctx context.Context, vid uuid.UUID, uid uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, vid, uid)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, vid, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, vid, uid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, vid, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAccessForUser provides a mock function with given fields: ctx, vid, uid
func (_m *mockRepoVocabAccess) RemoveAccessForUser(ctx context.Context, vid uuid.UUID, uid uuid.UUID) error {
	ret := _m.Called(ctx, vid, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, vid, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockRepoVocabAccess creates a new instance of mockRepoVocabAccess. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRepoVocabAccess(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRepoVocabAccess {
	mock := &mockRepoVocabAccess{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
