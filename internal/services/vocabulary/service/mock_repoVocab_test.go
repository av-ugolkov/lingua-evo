// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	context "context"

	access "github.com/av-ugolkov/lingua-evo/runtime/access"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	vocabulary "github.com/av-ugolkov/lingua-evo/internal/services/vocabulary"
)

// mockRepoVocab is an autogenerated mock type for the repoVocab type
type mockRepoVocab struct {
	mock.Mock
}

// AddAccessForUser provides a mock function with given fields: ctx, vid, uid, isEditor
func (_m *mockRepoVocab) AddAccessForUser(ctx context.Context, vid uuid.UUID, uid uuid.UUID, isEditor bool) error {
	ret := _m.Called(ctx, vid, uid, isEditor)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, bool) error); ok {
		r0 = rf(ctx, vid, uid, isEditor)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddVocab provides a mock function with given fields: ctx, vocab, tagIDs
func (_m *mockRepoVocab) AddVocab(ctx context.Context, vocab vocabulary.Vocab, tagIDs []uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(ctx, vocab, tagIDs)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vocabulary.Vocab, []uuid.UUID) (uuid.UUID, error)); ok {
		return rf(ctx, vocab, tagIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vocabulary.Vocab, []uuid.UUID) uuid.UUID); ok {
		r0 = rf(ctx, vocab, tagIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vocabulary.Vocab, []uuid.UUID) error); ok {
		r1 = rf(ctx, vocab, tagIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AddWord provides a mock function with given fields: ctx, word
func (_m *mockRepoVocab) AddWord(ctx context.Context, word vocabulary.VocabWord) (uuid.UUID, error) {
	ret := _m.Called(ctx, word)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, vocabulary.VocabWord) (uuid.UUID, error)); ok {
		return rf(ctx, word)
	}
	if rf, ok := ret.Get(0).(func(context.Context, vocabulary.VocabWord) uuid.UUID); ok {
		r0 = rf(ctx, word)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, vocabulary.VocabWord) error); ok {
		r1 = rf(ctx, word)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CopyVocab provides a mock function with given fields: ctx, uid, vid
func (_m *mockRepoVocab) CopyVocab(ctx context.Context, uid uuid.UUID, vid uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(ctx, uid, vid)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (uuid.UUID, error)); ok {
		return rf(ctx, uid, vid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) uuid.UUID); ok {
		r0 = rf(ctx, uid, vid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, uid, vid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteVocab provides a mock function with given fields: ctx, vocab
func (_m *mockRepoVocab) DeleteVocab(ctx context.Context, vocab vocabulary.Vocab) error {
	ret := _m.Called(ctx, vocab)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, vocabulary.Vocab) error); ok {
		r0 = rf(ctx, vocab)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWord provides a mock function with given fields: ctx, word
func (_m *mockRepoVocab) DeleteWord(ctx context.Context, word vocabulary.VocabWord) error {
	ret := _m.Called(ctx, word)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, vocabulary.VocabWord) error); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// EditVocab provides a mock function with given fields: ctx, vocab
func (_m *mockRepoVocab) EditVocab(ctx context.Context, vocab vocabulary.Vocab) error {
	ret := _m.Called(ctx, vocab)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, vocabulary.Vocab) error); ok {
		r0 = rf(ctx, vocab)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAccess provides a mock function with given fields: ctx, vid
func (_m *mockRepoVocab) GetAccess(ctx context.Context, vid uuid.UUID) (uint8, error) {
	ret := _m.Called(ctx, vid)

	var r0 uint8
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (uint8, error)); ok {
		return rf(ctx, vid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) uint8); ok {
		r0 = rf(ctx, vid)
	} else {
		r0 = ret.Get(0).(uint8)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, vid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetByName provides a mock function with given fields: ctx, uid, name
func (_m *mockRepoVocab) GetByName(ctx context.Context, uid uuid.UUID, name string) (vocabulary.Vocab, error) {
	ret := _m.Called(ctx, uid, name)

	var r0 vocabulary.Vocab
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) (vocabulary.Vocab, error)); ok {
		return rf(ctx, uid, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string) vocabulary.Vocab); ok {
		r0 = rf(ctx, uid, name)
	} else {
		r0 = ret.Get(0).(vocabulary.Vocab)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string) error); ok {
		r1 = rf(ctx, uid, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCountWords provides a mock function with given fields: ctx, uid
func (_m *mockRepoVocab) GetCountWords(ctx context.Context, uid uuid.UUID) (int, error) {
	ret := _m.Called(ctx, uid)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (int, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) int); ok {
		r0 = rf(ctx, uid)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCreatorVocab provides a mock function with given fields: ctx, vid
func (_m *mockRepoVocab) GetCreatorVocab(ctx context.Context, vid uuid.UUID) (uuid.UUID, error) {
	ret := _m.Called(ctx, vid)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (uuid.UUID, error)); ok {
		return rf(ctx, vid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) uuid.UUID); ok {
		r0 = rf(ctx, vid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, vid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEditable provides a mock function with given fields: ctx, vid, uid
func (_m *mockRepoVocab) GetEditable(ctx context.Context, vid uuid.UUID, uid uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, vid, uid)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, vid, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, vid, uid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, vid, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomVocabulary provides a mock function with given fields: ctx, vid, limit
func (_m *mockRepoVocab) GetRandomVocabulary(ctx context.Context, vid uuid.UUID, limit int) ([]vocabulary.VocabWordData, error) {
	ret := _m.Called(ctx, vid, limit)

	var r0 []vocabulary.VocabWordData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) ([]vocabulary.VocabWordData, error)); ok {
		return rf(ctx, vid, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int) []vocabulary.VocabWordData); ok {
		r0 = rf(ctx, vid, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWordData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int) error); ok {
		r1 = rf(ctx, vid, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSortedVocabulariesByUser provides a mock function with given fields: ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang
func (_m *mockRepoVocab) GetSortedVocabulariesByUser(ctx context.Context, uid uuid.UUID, _a2 []access.Type, page int, itemsPerPage int, typeSort int, order int, search string, nativeLang string, translateLang string) ([]vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)

	var r0 []vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) ([]vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) []vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) error); ok {
		r1 = rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTagsVocabulary provides a mock function with given fields: ctx, vid
func (_m *mockRepoVocab) GetTagsVocabulary(ctx context.Context, vid uuid.UUID) ([]string, error) {
	ret := _m.Called(ctx, vid)

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]string, error)); ok {
		return rf(ctx, vid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []string); ok {
		r0 = rf(ctx, vid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, vid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocab provides a mock function with given fields: ctx, vid
func (_m *mockRepoVocab) GetVocab(ctx context.Context, vid uuid.UUID) (vocabulary.Vocab, error) {
	ret := _m.Called(ctx, vid)

	var r0 vocabulary.Vocab
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (vocabulary.Vocab, error)); ok {
		return rf(ctx, vid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) vocabulary.Vocab); ok {
		r0 = rf(ctx, vid)
	} else {
		r0 = ret.Get(0).(vocabulary.Vocab)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, vid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabSeveralWords provides a mock function with given fields: ctx, vid, count, nativeLang, translateLang
func (_m *mockRepoVocab) GetVocabSeveralWords(ctx context.Context, vid uuid.UUID, count int, nativeLang string, translateLang string) ([]vocabulary.VocabWordData, error) {
	ret := _m.Called(ctx, vid, count, nativeLang, translateLang)

	var r0 []vocabulary.VocabWordData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, string, string) ([]vocabulary.VocabWordData, error)); ok {
		return rf(ctx, vid, count, nativeLang, translateLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, int, string, string) []vocabulary.VocabWordData); ok {
		r0 = rf(ctx, vid, count, nativeLang, translateLang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWordData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, int, string, string) error); ok {
		r1 = rf(ctx, vid, count, nativeLang, translateLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabWords provides a mock function with given fields: ctx, vid
func (_m *mockRepoVocab) GetVocabWords(ctx context.Context, vid uuid.UUID) ([]vocabulary.VocabWordData, error) {
	ret := _m.Called(ctx, vid)

	var r0 []vocabulary.VocabWordData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]vocabulary.VocabWordData, error)); ok {
		return rf(ctx, vid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []vocabulary.VocabWordData); ok {
		r0 = rf(ctx, vid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWordData)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, vid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabsWithCountWords provides a mock function with given fields: ctx, uid, owner, _a3
func (_m *mockRepoVocab) GetVocabsWithCountWords(ctx context.Context, uid uuid.UUID, owner uuid.UUID, _a3 []uint8) ([]vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, uid, owner, _a3)

	var r0 []vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []uint8) ([]vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, uid, owner, _a3)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID, []uint8) []vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, uid, owner, _a3)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID, []uint8) error); ok {
		r1 = rf(ctx, uid, owner, _a3)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabulariesByAccess provides a mock function with given fields: ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang
func (_m *mockRepoVocab) GetVocabulariesByAccess(ctx context.Context, uid uuid.UUID, _a2 []access.Type, page int, itemsPerPage int, typeSort int, order int, search string, nativeLang string, translateLang string) ([]vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)

	var r0 []vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) ([]vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) []vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) error); ok {
		r1 = rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabulariesByUser provides a mock function with given fields: ctx, uid
func (_m *mockRepoVocab) GetVocabulariesByUser(ctx context.Context, uid uuid.UUID) ([]vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, uid)

	var r0 []vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabulariesCountByAccess provides a mock function with given fields: ctx, uid, _a2, search, nativeLang, translateLang
func (_m *mockRepoVocab) GetVocabulariesCountByAccess(ctx context.Context, uid uuid.UUID, _a2 []access.Type, search string, nativeLang string, translateLang string) (int, error) {
	ret := _m.Called(ctx, uid, _a2, search, nativeLang, translateLang)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, string, string, string) (int, error)); ok {
		return rf(ctx, uid, _a2, search, nativeLang, translateLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, string, string, string) int); ok {
		r0 = rf(ctx, uid, _a2, search, nativeLang, translateLang)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []access.Type, string, string, string) error); ok {
		r1 = rf(ctx, uid, _a2, search, nativeLang, translateLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabulariesCountByUser provides a mock function with given fields: ctx, uid, _a2, search, nativeLang, translateLang
func (_m *mockRepoVocab) GetVocabulariesCountByUser(ctx context.Context, uid uuid.UUID, _a2 []access.Type, search string, nativeLang string, translateLang string) (int, error) {
	ret := _m.Called(ctx, uid, _a2, search, nativeLang, translateLang)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, string, string, string) (int, error)); ok {
		return rf(ctx, uid, _a2, search, nativeLang, translateLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, string, string, string) int); ok {
		r0 = rf(ctx, uid, _a2, search, nativeLang, translateLang)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []access.Type, string, string, string) error); ok {
		r1 = rf(ctx, uid, _a2, search, nativeLang, translateLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabulariesRecommended provides a mock function with given fields: ctx, uid, _a2, limit
func (_m *mockRepoVocab) GetVocabulariesRecommended(ctx context.Context, uid uuid.UUID, _a2 []uint8, limit uint) ([]vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, uid, _a2, limit)

	var r0 []vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uint8, uint) ([]vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, uid, _a2, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []uint8, uint) []vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, uid, _a2, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []uint8, uint) error); ok {
		r1 = rf(ctx, uid, _a2, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabulariesWithMaxWords provides a mock function with given fields: ctx, _a1, limit
func (_m *mockRepoVocab) GetVocabulariesWithMaxWords(ctx context.Context, _a1 []uint8, limit int) ([]vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, _a1, limit)

	var r0 []vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uint8, int) ([]vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, _a1, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uint8, int) []vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, _a1, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uint8, int) error); ok {
		r1 = rf(ctx, _a1, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWithCountWords provides a mock function with given fields: ctx, vid
func (_m *mockRepoVocab) GetWithCountWords(ctx context.Context, vid uuid.UUID) (vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, vid)

	var r0 vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, vid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, vid)
	} else {
		r0 = ret.Get(0).(vocabulary.VocabWithUser)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, vid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWord provides a mock function with given fields: ctx, wordID, nativeLang, translateLang
func (_m *mockRepoVocab) GetWord(ctx context.Context, wordID uuid.UUID, nativeLang string, translateLang string) (vocabulary.VocabWordData, error) {
	ret := _m.Called(ctx, wordID, nativeLang, translateLang)

	var r0 vocabulary.VocabWordData
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) (vocabulary.VocabWordData, error)); ok {
		return rf(ctx, wordID, nativeLang, translateLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, string, string) vocabulary.VocabWordData); ok {
		r0 = rf(ctx, wordID, nativeLang, translateLang)
	} else {
		r0 = ret.Get(0).(vocabulary.VocabWordData)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, string, string) error); ok {
		r1 = rf(ctx, wordID, nativeLang, translateLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RemoveAccessForUser provides a mock function with given fields: ctx, vid, uid
func (_m *mockRepoVocab) RemoveAccessForUser(ctx context.Context, vid uuid.UUID, uid uuid.UUID) error {
	ret := _m.Called(ctx, vid, uid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, vid, uid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateWord provides a mock function with given fields: ctx, word
func (_m *mockRepoVocab) UpdateWord(ctx context.Context, word vocabulary.VocabWord) error {
	ret := _m.Called(ctx, word)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, vocabulary.VocabWord) error); ok {
		r0 = rf(ctx, word)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockRepoVocab creates a new instance of mockRepoVocab. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRepoVocab(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRepoVocab {
	mock := &mockRepoVocab{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
