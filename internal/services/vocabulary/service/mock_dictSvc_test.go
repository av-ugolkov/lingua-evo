// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	context "context"

	dictionary "github.com/av-ugolkov/lingua-evo/internal/services/dictionary"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// mockDictSvc is an autogenerated mock type for the dictSvc type
type mockDictSvc struct {
	mock.Mock
}

// GetOrAddWords provides a mock function with given fields: ctx, words
func (_m *mockDictSvc) GetOrAddWords(ctx context.Context, words []dictionary.DictWord) ([]dictionary.DictWord, error) {
	ret := _m.Called(ctx, words)

	var r0 []dictionary.DictWord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dictionary.DictWord) ([]dictionary.DictWord, error)); ok {
		return rf(ctx, words)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dictionary.DictWord) []dictionary.DictWord); ok {
		r0 = rf(ctx, words)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dictionary.DictWord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dictionary.DictWord) error); ok {
		r1 = rf(ctx, words)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWordsByID provides a mock function with given fields: ctx, wordIDs
func (_m *mockDictSvc) GetWordsByID(ctx context.Context, wordIDs []uuid.UUID) ([]dictionary.DictWord, error) {
	ret := _m.Called(ctx, wordIDs)

	var r0 []dictionary.DictWord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]dictionary.DictWord, error)); ok {
		return rf(ctx, wordIDs)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []dictionary.DictWord); ok {
		r0 = rf(ctx, wordIDs)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dictionary.DictWord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, wordIDs)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWordsByText provides a mock function with given fields: ctx, words
func (_m *mockDictSvc) GetWordsByText(ctx context.Context, words []dictionary.DictWord) ([]dictionary.DictWord, error) {
	ret := _m.Called(ctx, words)

	var r0 []dictionary.DictWord
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []dictionary.DictWord) ([]dictionary.DictWord, error)); ok {
		return rf(ctx, words)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []dictionary.DictWord) []dictionary.DictWord); ok {
		r0 = rf(ctx, words)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]dictionary.DictWord)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []dictionary.DictWord) error); ok {
		r1 = rf(ctx, words)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockDictSvc creates a new instance of mockDictSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockDictSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockDictSvc {
	mock := &mockDictSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
