// Code generated by mockery v2.30.1. DO NOT EDIT.

package service

import (
	context "context"

	access "github.com/av-ugolkov/lingua-evo/runtime/access"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"

	vocabulary "github.com/av-ugolkov/lingua-evo/internal/services/vocabulary"
)

// mockRepoVocabUser is an autogenerated mock type for the repoVocabUser type
type mockRepoVocabUser struct {
	mock.Mock
}

// GetSortedVocabulariesByUser provides a mock function with given fields: ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang
func (_m *mockRepoVocabUser) GetSortedVocabulariesByUser(ctx context.Context, uid uuid.UUID, _a2 []access.Type, page int, itemsPerPage int, typeSort int, order int, search string, nativeLang string, translateLang string) ([]vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)

	var r0 []vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) ([]vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) []vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []access.Type, int, int, int, int, string, string, string) error); ok {
		r1 = rf(ctx, uid, _a2, page, itemsPerPage, typeSort, order, search, nativeLang, translateLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabulariesByUser provides a mock function with given fields: ctx, uid
func (_m *mockRepoVocabUser) GetVocabulariesByUser(ctx context.Context, uid uuid.UUID) ([]vocabulary.VocabWithUser, error) {
	ret := _m.Called(ctx, uid)

	var r0 []vocabulary.VocabWithUser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]vocabulary.VocabWithUser, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []vocabulary.VocabWithUser); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]vocabulary.VocabWithUser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetVocabulariesCountByUser provides a mock function with given fields: ctx, uid, _a2, search, nativeLang, translateLang
func (_m *mockRepoVocabUser) GetVocabulariesCountByUser(ctx context.Context, uid uuid.UUID, _a2 []access.Type, search string, nativeLang string, translateLang string) (int, error) {
	ret := _m.Called(ctx, uid, _a2, search, nativeLang, translateLang)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, string, string, string) (int, error)); ok {
		return rf(ctx, uid, _a2, search, nativeLang, translateLang)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, []access.Type, string, string, string) int); ok {
		r0 = rf(ctx, uid, _a2, search, nativeLang, translateLang)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, []access.Type, string, string, string) error); ok {
		r1 = rf(ctx, uid, _a2, search, nativeLang, translateLang)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockRepoVocabUser creates a new instance of mockRepoVocabUser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRepoVocabUser(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRepoVocabUser {
	mock := &mockRepoVocabUser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
