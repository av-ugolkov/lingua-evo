// Code generated by mockery v2.30.1. DO NOT EDIT.

package dictionary

import (
	context "context"

	language "github.com/av-ugolkov/lingua-evo/internal/services/language"
	mock "github.com/stretchr/testify/mock"
)

// mockLangSvc is an autogenerated mock type for the langSvc type
type mockLangSvc struct {
	mock.Mock
}

// CheckLanguage provides a mock function with given fields: ctx, langCode
func (_m *mockLangSvc) CheckLanguage(ctx context.Context, langCode string) error {
	ret := _m.Called(ctx, langCode)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, langCode)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAvailableLanguages provides a mock function with given fields: ctx
func (_m *mockLangSvc) GetAvailableLanguages(ctx context.Context) ([]*language.Language, error) {
	ret := _m.Called(ctx)

	var r0 []*language.Language
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*language.Language, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*language.Language); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*language.Language)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockLangSvc creates a new instance of mockLangSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockLangSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockLangSvc {
	mock := &mockLangSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
