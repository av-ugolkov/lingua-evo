// Code generated by mockery v2.30.1. DO NOT EDIT.

package dictionary

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// mockRepoDictionary is an autogenerated mock type for the repoDictionary type
type mockRepoDictionary struct {
	mock.Mock
}

// AddWord provides a mock function with given fields: ctx, w
func (_m *mockRepoDictionary) AddWord(ctx context.Context, w *Word) (uuid.UUID, error) {
	ret := _m.Called(ctx, w)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Word) (uuid.UUID, error)); ok {
		return rf(ctx, w)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Word) uuid.UUID); ok {
		r0 = rf(ctx, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Word) error); ok {
		r1 = rf(ctx, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteWord provides a mock function with given fields: ctx, w
func (_m *mockRepoDictionary) DeleteWord(ctx context.Context, w *Word) (int64, error) {
	ret := _m.Called(ctx, w)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Word) (int64, error)); ok {
		return rf(ctx, w)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Word) int64); ok {
		r0 = rf(ctx, w)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Word) error); ok {
		r1 = rf(ctx, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindWords provides a mock function with given fields: ctx, w
func (_m *mockRepoDictionary) FindWords(ctx context.Context, w *Word) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, w)

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Word) ([]uuid.UUID, error)); ok {
		return rf(ctx, w)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Word) []uuid.UUID); ok {
		r0 = rf(ctx, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Word) error); ok {
		r1 = rf(ctx, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRandomWord provides a mock function with given fields: ctx, w
func (_m *mockRepoDictionary) GetRandomWord(ctx context.Context, w *Word) (*Word, error) {
	ret := _m.Called(ctx, w)

	var r0 *Word
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Word) (*Word, error)); ok {
		return rf(ctx, w)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Word) *Word); ok {
		r0 = rf(ctx, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*Word)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Word) error); ok {
		r1 = rf(ctx, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWordByText provides a mock function with given fields: ctx, w
func (_m *mockRepoDictionary) GetWordByText(ctx context.Context, w *Word) (uuid.UUID, error) {
	ret := _m.Called(ctx, w)

	var r0 uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *Word) (uuid.UUID, error)); ok {
		return rf(ctx, w)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *Word) uuid.UUID); ok {
		r0 = rf(ctx, w)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *Word) error); ok {
		r1 = rf(ctx, w)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWords provides a mock function with given fields: ctx, ids
func (_m *mockRepoDictionary) GetWords(ctx context.Context, ids []uuid.UUID) ([]Word, error) {
	ret := _m.Called(ctx, ids)

	var r0 []Word
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) ([]Word, error)); ok {
		return rf(ctx, ids)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []Word); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]Word)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []uuid.UUID) error); ok {
		r1 = rf(ctx, ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateWord provides a mock function with given fields: ctx, w
func (_m *mockRepoDictionary) UpdateWord(ctx context.Context, w *Word) error {
	ret := _m.Called(ctx, w)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *Word) error); ok {
		r0 = rf(ctx, w)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockRepoDictionary creates a new instance of mockRepoDictionary. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRepoDictionary(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRepoDictionary {
	mock := &mockRepoDictionary{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
