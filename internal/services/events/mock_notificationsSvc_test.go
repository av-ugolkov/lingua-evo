// Code generated by mockery v2.30.1. DO NOT EDIT.

package events

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// mockNotificationsSvc is an autogenerated mock type for the notificationsSvc type
type mockNotificationsSvc struct {
	mock.Mock
}

// GetVocabNotifications provides a mock function with given fields: ctx, uid
func (_m *mockNotificationsSvc) GetVocabNotifications(ctx context.Context, uid uuid.UUID) ([]uuid.UUID, error) {
	ret := _m.Called(ctx, uid)

	var r0 []uuid.UUID
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) ([]uuid.UUID, error)); ok {
		return rf(ctx, uid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) []uuid.UUID); ok {
		r0 = rf(ctx, uid)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]uuid.UUID)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, uid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// newMockNotificationsSvc creates a new instance of mockNotificationsSvc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockNotificationsSvc(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockNotificationsSvc {
	mock := &mockNotificationsSvc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
