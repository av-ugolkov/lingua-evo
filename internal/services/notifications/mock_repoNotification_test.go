// Code generated by mockery v2.30.1. DO NOT EDIT.

package notifications

import (
	context "context"

	uuid "github.com/google/uuid"
	mock "github.com/stretchr/testify/mock"
)

// mockRepoNotification is an autogenerated mock type for the repoNotification type
type mockRepoNotification struct {
	mock.Mock
}

// DeleteVocabNotification provides a mock function with given fields: ctx, uid, vid
func (_m *mockRepoNotification) DeleteVocabNotification(ctx context.Context, uid uuid.UUID, vid uuid.UUID) error {
	ret := _m.Called(ctx, uid, vid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, uid, vid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetVocabNotification provides a mock function with given fields: ctx, uid, vid
func (_m *mockRepoNotification) GetVocabNotification(ctx context.Context, uid uuid.UUID, vid uuid.UUID) (bool, error) {
	ret := _m.Called(ctx, uid, vid)

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) (bool, error)); ok {
		return rf(ctx, uid, vid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) bool); ok {
		r0 = rf(ctx, uid, vid)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r1 = rf(ctx, uid, vid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SetVocabNotification provides a mock function with given fields: ctx, uid, vid
func (_m *mockRepoNotification) SetVocabNotification(ctx context.Context, uid uuid.UUID, vid uuid.UUID) error {
	ret := _m.Called(ctx, uid, vid)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, uuid.UUID) error); ok {
		r0 = rf(ctx, uid, vid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// newMockRepoNotification creates a new instance of mockRepoNotification. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func newMockRepoNotification(t interface {
	mock.TestingT
	Cleanup(func())
}) *mockRepoNotification {
	mock := &mockRepoNotification{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
